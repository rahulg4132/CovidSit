{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/header/header.component.html","webpack:///./src/app/header/header.component.scss","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/menu/menu.component.html","webpack:///./src/app/menu/menu.component.scss","webpack:///./src/app/menu/menu.component.ts","webpack:///./src/app/services/countrylist.service.ts","webpack:///./src/app/services/countrywise.service.ts","webpack:///./src/app/services/global.service.ts","webpack:///./src/app/services/statelist.service.ts","webpack:///./src/app/shared/baseurl.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<body>\\r\\n    <app-header></app-header>\\r\\n    <app-menu></app-menu>\\r\\n</body>\"","module.exports = \"body {\\n  background-color: #ffe4c1; }\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'CovidSit';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CountUpModule} from 'ngx-countup';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport 'hammerjs';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\n\nimport { GlobalService } from './services/global.service';\nimport { baseurl } from './shared/baseurl';\nimport { MenuComponent } from './menu/menu.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    MenuComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    CountUpModule,\n    FormsModule,\n    ReactiveFormsModule    \n  ],\n  providers: [  \n    GlobalService,\n    {provide: 'baseURL', useValue: baseurl}  \n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","module.exports = \"<div class=\\\"container\\\">  \\n  <h1 style=\\\"text-align: center;\\\">C<img src=\\\"../../assets/images/cor.png\\\" alt=\\\"O\\\" style=\\\"width: 2rem; height: 2rem;\\\">vid-19 Update</h1>\\n  <div class=\\\"circle bg-warning\\\">    \\n    <p class=\\\"pt-4\\\">Total Cases</p>\\n    <hr>\\n    <p style=\\\"font-size: xx-large;\\\" [countUp]=\\\"gconfirm\\\">0</p>\\n  </div>  \\n  <br>\\n  <div class=\\\"d-flex justify-content-around\\\">\\n    <div class=\\\"card\\\" style=\\\"background-color: hsl(202, 58%, 44%);\\\">\\n      <span class=\\\"pt-3\\\">Active</span>\\n      <span class=\\\"pt-2 aa\\\" [countUp]=\\\"gconfirm-grecover-gdeath\\\">0</span>\\n    </div>\\n    <div class=\\\"card\\\" style=\\\"background-color: hsl(145, 83%, 40%);\\\">\\n      <span class=\\\"pt-3\\\">Recovered</span>\\n      <span class=\\\"pt-2 aa\\\" [countUp]=\\\"grecover\\\">0</span>\\n    </div>\\n    <div class=\\\"card\\\" style=\\\"background-color: #ff0000a1;\\\">\\n      <span class=\\\"pt-3\\\">Deaths</span>\\n      <span class=\\\"pt-2 aa\\\" [countUp]=\\\"gdeath\\\">0</span>\\n    </div>        \\n  </div>   \\n  <!--<p class=\\\"pt-2\\\" style=\\\"text-align: right;\\\">Last Updated: {{globe.lastUpdate}}</p>-->\\n  <br>\\n  <div class=\\\"d-flex justify-content-around flex-wrap\\\">\\n    <div class=\\\"d-flex\\\">\\n      <div class='box bg-warning'></div>\\n      <span class=\\\"def\\\"> Confirmed</span>\\n    </div>\\n    \\n    <div class=\\\"d-flex\\\">\\n      <div class='box' style=\\\"background-color: hsl(202, 58%, 44%);\\\"></div>\\n      <span class=\\\"def\\\"> Active</span>\\n    </div>\\n    \\n    <div class=\\\"d-flex\\\">\\n      <div class='box' style=\\\"background-color: hsl(145, 83%, 40%);\\\"></div>\\n      <span class=\\\"def\\\"> Recovered</span>\\n    </div>\\n    <div class=\\\"d-flex\\\">\\n      <div class='box' style=\\\"background-color: #ff0000a1;\\\"></div>\\n      <span class=\\\"def\\\"> Deaths</span>\\n    </div>\\n\\n  </div>\\n  <br>\\n</div>\\n\"","module.exports = \".circle {\\n  margin: auto;\\n  text-align: center;\\n  background-color: green;\\n  width: 200px;\\n  border-radius: 50%;\\n  height: 170px;\\n  font-size: x-large;\\n  font-weight: bold; }\\n\\n.card {\\n  width: 200px;\\n  height: 100px;\\n  border-radius: 10px; }\\n\\n.card span {\\n  text-align: center;\\n  font-size: large;\\n  color: white; }\\n\\n.card .aa {\\n  font-size: x-large; }\\n\\n.box {\\n  height: 12px;\\n  width: 12px;\\n  margin-top: 7px; }\\n\\n.def {\\n  font-family: \\\"Comic Sans MS\\\", cursive, sans-serif; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport {GlobalService} from '../services/global.service';\nimport { Globe } from '../shared/globe';\nimport {ValDet} from '../shared/valdet';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  globe: Globe;\n  gconfirm: number;\n  grecover: number;\n  gdeath: number;\n\n  constructor(private global: GlobalService) { }\n  \n  ngOnInit() {  \n    return this.global.getglobal()\n    .subscribe(data=>{\n      this.globe=data;\n      this.gconfirm=data.confirmed.value;\n      this.grecover=data.recovered.value;\n      this.gdeath=data.deaths.value;\n    });\n  }\n  \n}\n","module.exports = \"<div class=\\\"container\\\"> \\n\\n  <form [formGroup]=\\\"form\\\">\\n    \\n    <div *ngIf=\\\"countries\\\">\\n      <label>Select Country: </label>\\n      <select class=\\\"custom-select\\\" formControlName=\\\"selectedcountry\\\">           \\n        <option *ngFor=\\\"let country of countries\\\" [(ngValue)]=\\\"country.name\\\">\\n          {{ country.name }}\\n        </option>\\n      </select>\\n    </div>\\n\\n    <div *ngIf=\\\"selcountry\\\">\\n      <br>\\n      <div class=\\\"confirm progress-bar bg-warning\\\" [countUp]=\\\"selcountry.confirmed.value\\\">0</div>\\n      <br>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"active progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"100*(selcountry.confirmed.value - selcountry.recovered.value - selcountry.deaths.value)/selcountry.confirmed.value\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"selcountry.confirmed.value - selcountry.recovered.value - selcountry.deaths.value\\\">0</span>\\n      </div>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"recover progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"(100*selcountry.recovered.value)/selcountry.confirmed.value\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"selcountry.recovered.value\\\">0</span>\\n      </div>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"death progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"(100*selcountry.deaths.value)/selcountry.confirmed.value\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"selcountry.deaths.value\\\">0</span>\\n      </div>\\n    </div>\\n\\n    <div [hidden]=\\\"countries\\\">\\n      <div class=\\\"spinner-border text-info\\\"></div>\\n    </div>\\n    \\n\\n    <br><br>\\n    <div *ngIf=\\\"states && states.length>1\\\">\\n      <label>Select Province: </label>\\n      <select class=\\\"custom-select\\\" formControlName=\\\"selectedprovince\\\">           \\n        <option *ngFor=\\\"let state of states\\\" [(ngValue)]=\\\"state.uid\\\">\\n          {{ state.provinceState }}\\n        </option>\\n      </select>\\n    </div>\\n\\n    <div *ngIf=\\\"stat\\\">\\n      <br>\\n      <div class=\\\"confirm progress-bar bg-warning\\\" [countUp]=\\\"stat.confirmed\\\">0</div>\\n      <br>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"active progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"(100*stat.active)/stat.confirmed\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"stat.active\\\">0</span>\\n      </div>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"recover progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"(100*stat.recovered)/stat.confirmed\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"stat.recovered\\\">0</span>\\n      </div>\\n      <div class=\\\"d-flex\\\">\\n        <span class=\\\"death progress-bar progress-bar-striped progress-bar-animated\\\" [style.width.%]=\\\"(100*stat.deaths)/stat.confirmed\\\"></span>\\n        <span class=\\\"num\\\" [countUp]=\\\"stat.deaths\\\">0</span>\\n      </div>      \\n      <br><p>Incident Rate: <b>{{stat.incidentRate}}</b> <img src=\\\"../../assets/images/rate.jpg\\\" width=\\\"20\\\" height=\\\"20\\\"></p>\\n      <hr>\\n      <p style=\\\"text-align: right;\\\">Last Updated: {{stat.lastUpdate | date:'medium'}}</p>\\n    </div>\\n\\n    <div *ngIf=\\\"!states && selcountry\\\">\\n      <div class=\\\"spinner-border text-info\\\"></div>\\n    </div>    \\n  </form>    \\n  <br><br><br>\\n</div>\\n\"","module.exports = \"form {\\n  height: 650px; }\\n\\n.confirm {\\n  width: 100%;\\n  height: 45px;\\n  color: black;\\n  font-size: x-large;\\n  font-weight: bold; }\\n\\n.active {\\n  background-color: #2f82b1;\\n  height: 30px; }\\n\\n.recover {\\n  background-color: #11bb58;\\n  height: 30px; }\\n\\n.death {\\n  background-color: #ff0000a1;\\n  height: 30px; }\\n\\n.num {\\n  font-weight: bold;\\n  font-size: large; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CountrylistService } from '../services/countrylist.service';\nimport { Country, CountryArr } from '../shared/country';\nimport {FormControl, FormGroup, FormControlName} from '@angular/forms';\nimport { StatelistService } from '../services/statelist.service';\nimport { State } from '../shared/state';\nimport { CountrywiseService } from '../services/countrywise.service';\nimport { Globe } from '../shared/globe';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent implements OnInit {\n\n  countryarr: CountryArr;\n  countries: Country[];  \n  selcountry: Globe;\n  states: State[];\n  stat: State;\n\n  constructor(private countrylist: CountrylistService, private statelist: StatelistService, private countrywise: CountrywiseService) {}\n  \n  ngOnInit() {\n    this.countrylist.getcountrylist()\n    .subscribe((data)=>{\n      this.countryarr=data;      \n      this.countries=this.countryarr.countries;       \n    });    \n\n    this.form.get(\"selectedcountry\").valueChanges\n    .subscribe(val=>{\n      this.countrywise.getCountryDetails(val)\n      .subscribe(data=>this.selcountry=data);\n\n      this.stat=null;\n      this.states=null;\n\n      this.statelist.getstatelist(val)\n      .subscribe((data)=>{\n        this.states=data;        \n      });      \n    });\n\n    this.form.get(\"selectedprovince\").valueChanges\n    .subscribe(val=>{\n      this.stat=this.states.filter(function(item){\n        return item.uid==val;\n      })[0];      \n    });\n\n  }  \n  \n  form = new FormGroup({\n    selectedcountry: new FormControl(''),  \n    selectedprovince: new FormControl('')\n  });\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Country, CountryArr } from '../shared/country';\nimport { baseurl } from '../shared/baseurl';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountrylistService {\n\n  constructor(private http: HttpClient) { }\n  \n  getcountrylist(): Observable<CountryArr>{\n    return this.http.get<CountryArr>(baseurl+'/countries')\n    .pipe(map(countries=>countries));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Globe } from '../shared/globe';\nimport { baseurl } from '../shared/baseurl';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountrywiseService {\n\n  constructor(private http: HttpClient) { }\n\n  getCountryDetails(abcd: string): Observable<Globe> {\n    return this.http.get<Globe>(baseurl+'/countries/'+abcd);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {baseurl} from '../shared/baseurl';\nimport {Globe} from '../shared/globe';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalService {\n\n  constructor(private http: HttpClient) { }\n\n  getglobal(): Observable<Globe> {\n    return this.http.get<Globe>(baseurl);\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { State } from '../shared/state';\nimport { baseurl } from '../shared/baseurl';\nimport { Observable } from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatelistService {\n\n  constructor(private http: HttpClient) { }\n\n  getstatelist(abcd: string): Observable<State[]> {\n    return this.http.get<State[]>(baseurl+'/countries/'+abcd+'/confirmed');\n  }\n\n  getstate(abcd: string, uid: string): Observable<State> {\n    return this.http.get<State>(baseurl+'/countries/'+abcd+'/confirmed/?uid='+uid)\n    .pipe(map(data=>data[0]));    \n  }\n}\n","export const baseurl=\"https://covid19.mathdro.id/api\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}